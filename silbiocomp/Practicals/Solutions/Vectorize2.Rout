
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Runs the stochastic Ricker Eqn in its recursion form.
> 
> rm(list=ls())
> 
> # stochrickApp <- function(val)
> # {
> #   #initialize
> #       newval<-val*exp(r*(1-val/K)+rnorm(1,0,sigma))
> #   }
> #   return(newval)
> # }
> 
> 
> stochrick<-function(p0=runif(1000,.5,1.5),r=1.2,K=1,sigma=0.2,numyears=100)
+ {
+   #initialize
+   N<-matrix(NA,numyears,length(p0))
+   N[1,]<-p0
+   
+   for (pop in 1:length(p0)) #loop through the populations
+   {
+     for (yr in 2:numyears) #for each pop, loop through the years
+     {
+       N[yr,pop]<-N[yr-1,pop]*exp(r*(1-N[yr-1,pop]/K)+rnorm(1,0,sigma))
+     }
+   }
+   return(N)
+ }
> print("Stochastic Ricker takes:")
[1] "Stochastic Ricker takes:"
> print(system.time(N<-stochrick()))
   user  system elapsed 
  0.469   0.000   0.470 
> 
> stochrickvect<-function(p0=runif(1000,0.5,1.5),r=1.2,K=1,sigma=.2,numyears=100)
+ {
+   N<-matrix(NA,numyears,length(p0)) 
+   N[1,]<-p0
+   for (counter in 2:numyears) #for each pop, loop through the years
+   {
+     N[counter,]<-N[counter-1,] * exp(r*(1-N[counter-1,]/K)+rnorm(length(p0),0,sigma))
+   }
+   return(N)
+ }
> 
> print("Vectorized Stochastic Ricker takes:")
[1] "Vectorized Stochastic Ricker takes:"
> print(system.time(N2 <- stochrickvect()))
   user  system elapsed 
  0.015   0.000   0.014 
> 
> proc.time()
   user  system elapsed 
  0.666   0.021   0.675 
